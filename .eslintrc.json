{
  "env": {
    "es2022": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "overrides": [
    {
      "files": ["./src/typeDefs/**/*.ts"],
      "processor": "@graphql-eslint/graphql"
    },
    {
      "files": ["./src/typeDefs/**/*.graphql"],
      "parser": "@graphql-eslint/eslint-plugin",
      "plugins": ["@graphql-eslint"],
      // Do not apply naming conventions to .graphql files
      "rules": {
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/consistent-type-assertions": "off"
      }
    },
    {
      "files": ["tests/**/*"],
      "rules": {
        "no-restricted-imports": "off"
      }
    },
    {
      // Disable explicit function return type for index.ts as it uses a lot of templated code
      // which has convulated return types
      "files": ["./src/index.ts", "./src/utilities/copyToClipboard.ts"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-empty-function": "off"
      }
    }
  ],

  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "tsconfigRootDir": ".",
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "eslint-plugin-tsdoc", "import"],
  "root": true,
  "rules": {
    "no-restricted-imports": [
      "error",
      {
        "patterns": ["**/src/**"]
      }
    ],

    // restrict the use of same package in multiple import statements
    "import/no-duplicates": "error",

    // warn/1, error/2, off/0
    "tsdoc/syntax": "error",

    // Typescript Rules
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/ban-types": "error",
    "@typescript-eslint/no-duplicate-enum-values": "error",

    // Typescript rule to enforce PascalCase naming convention for types and interfaces
    "@typescript-eslint/naming-convention": [
      "error",
      // Interfaces must begin with Interface or TestInterface followed by a PascalCase name
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "prefix": ["Interface", "TestInterface"]
      },
      // Type Aliases must be in PascalCase
      {
        "selector": ["typeAlias", "typeLike", "enum"],
        "format": ["PascalCase"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "function",
        "format": ["camelCase"]
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      { "selector": "variable", "modifiers": ["exported"], "format": null }
    ],

    // Typescript additional rules
    "@typescript-eslint/array-type": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/explicit-function-return-type": "error"
  }
}
