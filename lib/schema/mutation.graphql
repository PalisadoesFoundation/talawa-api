module.exports = `

 type Mutation {
    singleFileUpload(file: Upload!): FileUploadResponse!
    signUp(data: UserInput!, file:Upload): AuthData!
    login(data: LoginInput!): AuthData!
    otp(data: OTPInput!): OtpData!
    recaptcha(data: RecaptchaVerification!): Boolean!
    forgotPassword(data: ForgotPasswordData!): Boolean!
    saveFcmToken(token: String) : Boolean! @auth
    refreshToken(refreshToken: String!) : ExtendSession!
    revokeRefreshTokenForUser(userId: String!) : Boolean!
    updateLanguage(languageCode: String!) : User! @auth
    logout: Boolean! @auth

    updateUserProfile(data: UpdateUserInput, file:Upload): User! @auth
    updateUserType(data: UpdateUserTypeInput!): Boolean! @auth
    createEvent(data: EventInput): Event! @auth
    removeEvent(id: ID!): Event! @auth
    registerForEvent(id: ID!): Event! @auth
    unregisterForEventByUser(id: ID!): Event! @auth
    updateEvent(id:ID!, data: UpdateEventInput) : Event! @auth

    createOrganization(data: OrganizationInput, file:Upload): Organization! @auth
    updateOrganization(id:ID!, data: UpdateOrganizationInput) : Organization! @auth
    removeOrganization(id: ID!) : User! @auth
    
    acceptAdmin(id: ID!): Boolean! @auth
    rejectAdmin(id: ID!): Boolean! @auth

    createAdmin (data: UserAndOrganizationInput!) : User! @auth
    removeAdmin (data: UserAndOrganizationInput!) : User! @auth
    joinPublicOrganization (organizationId: ID!) : User! @auth
    leaveOrganization (organizationId: ID!) : User! @auth
    removeMember (data: MultipleUsersAndOrganizationInput!) : Organization! @auth

    adminRemovePost(organizationId: ID!, postId:ID!):Post! @auth 
    adminRemoveEvent(eventId: ID!): Event! @auth
    adminRemoveGroup(groupId:ID!):Message! @auth

    createPost(data: PostInput!, file: Upload): Post @auth
    removePost(id:ID!): Post @auth
    likePost(id:ID!): Post @auth
    unlikePost(id:ID!): Post @auth

    createComment(postId:ID!, data: CommentInput!): Comment @auth
    removeComment(id:ID!): Comment @auth
    likeComment(id:ID!): Comment @auth
    unlikeComment(id:ID!): Comment @auth

    createTask(data: TaskInput, eventId: ID!): Task! @auth
    updateTask(id:ID!, data: UpdateTaskInput) : Task @auth
    removeTask(id: ID!) : Task @auth

    createGroup(data: GroupInput!): Group! @auth

    sendMembershipRequest(organizationId: ID!) : MembershipRequest! @auth
    acceptMembershipRequest(membershipRequestId: ID!): MembershipRequest! @auth
    rejectMembershipRequest(membershipRequestId: ID!): MembershipRequest! @auth
    cancelMembershipRequest(membershipRequestId: ID!) : MembershipRequest! @auth

    blockUser(organizationId: ID!, userId: ID!) : User! @auth
    unblockUser(organizationId: ID!, userId:ID!) : User! @auth

    addUserImage(file: Upload!): User! @auth
    removeUserImage: User! @auth
    addOrganizationImage(file: Upload!, organizationId: String!): Organization! @auth
    removeOrganizationImage(organizationId: String!): Organization! @auth

    createDirectChat(data: createChatInput): DirectChat! @auth
    removeDirectChat(chatId: ID!, organizationId: ID!) : DirectChat! @auth
    sendMessageToDirectChat(chatId: ID!, messageContent: String!): DirectChatMessage! @auth

    createGroupChat(data: createGroupChatInput): GroupChat! @auth
    removeGroupChat(chatId: ID!): GroupChat! @auth
    sendMessageToGroupChat(chatId: ID!, messageContent: String!): GroupChatMessage! @auth
    addUserToGroupChat(userId: ID!, chatId: ID!): GroupChat! @auth
    removeUserFromGroupChat(userId: ID!, chatId: ID!): GroupChat! @auth
    blockPluginCreationBySuperadmin(userId: ID!, blockUser: Boolean!): User! @auth

    createMessageChat(data:MessageChatInput!): MessageChat! @auth
    addLanguageTranslation(data: LanguageInput!): Language! @auth

    createPlugin(pluginName: String! , pluginCreatedBy: String! ,pluginDesc: String! ,pluginInstallStatus: Boolean!, installedOrgs:[ID!] ):Plugin!
    updatePluginStatus(id: ID!, status: Boolean!) : Plugin!
    updatePluginInstalledOrgs(id: ID! ,orgId: ID!) :Plugin! 
  }
  
`
