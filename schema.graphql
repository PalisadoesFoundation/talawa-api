type Advertisement {
  """Array of attachments."""
  attachments: [AdvertisementAttachment!]

  """Date time at the time the advertisement was created."""
  createdAt: DateTime

  """User who created the advertisement."""
  creator: User

  """Custom information about the advertisement."""
  description: String

  """Date time at the time the advertised event ends at."""
  endAt: DateTime

  """Global identifier of the advertisement."""
  id: ID!

  """Name of the advertisement."""
  name: String

  """Organization which the advertisement belongs to."""
  organization: Organization

  """Date time at the time the advertised event starts at."""
  startAt: DateTime

  """Type of the attachment."""
  type: AdvertisementType

  """Date time at the time the advertisement was last updated."""
  updatedAt: DateTime

  """User who last updated the advertisement."""
  updater: User
}

""""""
type AdvertisementAttachment {
  """Type of the attachment."""
  type: AdvertisementAttachmentType

  """URI to the attachment."""
  uri: String
}

""""""
input AdvertisementAttachmentInput {
  """Type of the attachment."""
  type: AdvertisementAttachmentType!

  """URI to the attachment."""
  uri: String!
}

""""""
enum AdvertisementAttachmentType {
  image
  video
}

""""""
enum AdvertisementType {
  banner
  menu
  pop_up
}

""""""
type AuthenticationPayload {
  """
  This is the authentication token using which a user can sign in to talawa.
  """
  authenticationToken: String

  """"""
  user: User
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Comment {
  """Body of the comment."""
  body: String

  """Date time at the time the comment was created."""
  createdAt: DateTime

  """User who created the comment."""
  creator: User

  """
  GraphQL connection to traverse through the voters that down voted the comment.
  """
  downVoters(after: String, before: String, first: Int, last: Int): CommentDownVotersConnection

  """Total number of down votes on the comment."""
  downVotesCount: Int

  """Global identifier of the comment."""
  id: ID!

  """Post which the post belongs to."""
  post: Post

  """
  GraphQL connection to traverse through the voters that up voted the comment.
  """
  upVoters(after: String, before: String, first: Int, last: Int): CommentUpVotersConnection

  """Total number of up votes on the comment."""
  upVotesCount: Int

  """Date time at the time the comment was last updated."""
  updatedAt: DateTime

  """User who last updated the comment."""
  updater: User
}

""""""
type CommentDownVotersConnection {
  edges: [CommentDownVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type CommentDownVotersConnectionEdge {
  cursor: String!
  node: User
}

""""""
type CommentUpVotersConnection {
  edges: [CommentUpVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type CommentUpVotersConnectionEdge {
  cursor: String!
  node: User
}

""""""
enum CommentVoteType {
  down_vote
  up_vote
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

type Fund {
  """
  GraphQL connection to traverse through the fund campaigns that are associated to the fund.
  """
  campaigns(after: String, before: String, first: Int, last: Int): FundCampaignsConnection

  """Date time at the time the fund was created."""
  createdAt: DateTime

  """User who created the fund."""
  creator: User

  """Global identifier of the fund."""
  id: ID!

  """Boolean to tell if the fund is tax deductible."""
  isTaxDeductible: Boolean

  """Name of the fund."""
  name: String

  """Organization which the fund belongs to."""
  organization: Organization

  """Date time at the time the fund was last updated."""
  updatedAt: DateTime

  """User who last updated the fund."""
  updater: User
}

type FundCampaign {
  """Date time at the time the fund campaign was created."""
  createdAt: DateTime

  """User who created the fund campaign."""
  creator: User

  """Currency code of the fund campaign."""
  currencyCode: Iso4217CurrencyCode

  """Date time at the time the fund campaign ends at."""
  endAt: DateTime

  """Fund which the campaign is associated to."""
  fund: Fund

  """Minimum amount of money that is set as the goal for the fund campaign."""
  goalAmount: Int

  """Global identifier of the fund campaign."""
  id: ID!

  """Name of the fund campaign."""
  name: String

  """Total amount of money pledged under the fund campaign."""
  pledgedAmount: BigInt

  """
  GraphQL connection to traverse through the pledges associated to the fund campaign.
  """
  pledges(after: String, before: String, first: Int, last: Int): FundCampaignPledgesConnection

  """Date time at the time the fund campaign starts at."""
  startAt: DateTime

  """Date time at the time the fund campaign was last updated."""
  updatedAt: DateTime

  """User who last updated the fund campaign."""
  updater: User
}

type FundCampaignPledge {
  """The amount of pledged money."""
  amount: Int

  """Fund campaign which the fund campaign pledge is associated to."""
  campaign: FundCampaign

  """Date time at the time the fund campaign pledge was created."""
  createdAt: DateTime

  """User who created the fund campaign pledge."""
  creator: User

  """Global identifier of the fund campaign pledge."""
  id: ID!

  """Custom information about the fund campaign pledge."""
  note: String

  """User on whose behalf the fund campaign pledge is created."""
  pledger: User

  """Date time at the time the fund campaign pledge was last updated."""
  updatedAt: DateTime

  """User who last updated the fund campaign pledge."""
  updater: User
}

""""""
type FundCampaignPledgesConnection {
  edges: [FundCampaignPledgesConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type FundCampaignPledgesConnectionEdge {
  cursor: String!
  node: FundCampaignPledge
}

""""""
type FundCampaignsConnection {
  edges: [FundCampaignsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type FundCampaignsConnectionEdge {
  cursor: String!
  node: FundCampaign
}

""""""
enum Iso3166Alpha2CountryCode {
  ad
  ae
  af
  ag
  ai
  al
  am
  ao
  aq
  ar
  as
  at
  au
  aw
  ax
  az
  ba
  bb
  bd
  be
  bf
  bg
  bh
  bi
  bj
  bl
  bm
  bn
  bo
  bq
  br
  bs
  bt
  bv
  bw
  by
  bz
  ca
  cc
  cd
  cf
  cg
  ch
  ci
  ck
  cl
  cm
  cn
  co
  cr
  cu
  cv
  cw
  cx
  cy
  cz
  de
  dj
  dk
  dm
  do
  dz
  ec
  ee
  eg
  eh
  er
  es
  et
  fi
  fj
  fk
  fm
  fo
  fr
  ga
  gb
  gd
  ge
  gf
  gg
  gh
  gi
  gl
  gm
  gn
  gp
  gq
  gr
  gs
  gt
  gu
  gw
  gy
  hk
  hm
  hn
  hr
  ht
  hu
  id
  ie
  il
  im
  in
  io
  iq
  ir
  is
  it
  je
  jm
  jo
  jp
  ke
  kg
  kh
  ki
  km
  kn
  kp
  kr
  kw
  ky
  kz
  la
  lb
  lc
  li
  lk
  lr
  ls
  lt
  lu
  lv
  ly
  ma
  mc
  md
  me
  mf
  mg
  mh
  mk
  ml
  mm
  mn
  mo
  mp
  mq
  mr
  ms
  mt
  mu
  mv
  mw
  mx
  my
  mz
  na
  nc
  ne
  nf
  ng
  ni
  nl
  no
  np
  nr
  nu
  nz
  om
  pa
  pe
  pf
  pg
  ph
  pk
  pl
  pm
  pn
  pr
  ps
  pt
  pw
  py
  qa
  re
  ro
  rs
  ru
  rw
  sa
  sb
  sc
  sd
  se
  sg
  sh
  si
  sj
  sk
  sl
  sm
  sn
  so
  sr
  ss
  st
  sv
  sx
  sy
  sz
  tc
  td
  tf
  tg
  th
  tj
  tk
  tl
  tm
  tn
  to
  tr
  tt
  tv
  tw
  tz
  ua
  ug
  um
  us
  uy
  uz
  va
  vc
  ve
  vg
  vi
  vn
  vu
  wf
  ws
  ye
  yt
  za
  zm
  zw
}

""""""
enum Iso4217CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLE
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VED
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWG
}

type Mutation {
  """Mutation field to create an advertisement."""
  createAdvertisement(input: MutationCreateAdvertisementInput!): Advertisement

  """Mutation field to create a comment."""
  createComment(input: MutationCreateCommentInput!): Comment

  """Mutation field to create a comment vote."""
  createCommentVote(input: MutationCreateCommentVoteInput!): Comment

  """Mutation field to create a fund."""
  createFund(input: MutationCreateFundInput!): Fund

  """Mutation field to create a fund campaign."""
  createFundCampaign(input: MutationCreateFundCampaignInput!): FundCampaign

  """Mutation field to create a fund campaign pledge."""
  createFundCampaignPledge(input: MutationCreateFundCampaignPledgeInput!): FundCampaignPledge

  """Mutation field to create an organization."""
  createOrganization(input: MutationCreateOrganizationInput!): Organization

  """Mutation field to create an organization membership."""
  createOrganizationMembership(input: MutationCreateOrganizationMembershipInput!): Organization

  """Mutation field to create a post."""
  createPost(input: MutationCreatePostInput!): Post

  """Mutation field to create a post vote."""
  createPostVote(input: MutationCreatePostVoteInput!): Post

  """Mutation field to create a tag."""
  createTag(input: MutationCreateTagInput!): Tag

  """Mutation field to create a user."""
  createUser(
    """Input required to create a user."""
    input: MutationCreateUserInput!
  ): AuthenticationPayload

  """Mutation field to delete an advertisement."""
  deleteAdvertisement(input: MutationDeleteAdvertisementInput!): Advertisement

  """Mutation field to delete a comment."""
  deleteComment(input: MutationDeleteCommentInput!): Comment

  """Mutation field to delete a comment vote."""
  deleteCommentVote(input: MutationDeleteCommentVoteInput!): Comment

  """Mutation field to delete the current user."""
  deleteCurrentUser: User

  """Mutation field to delete a fund."""
  deleteFund(input: MutationDeleteFundInput!): Fund

  """Mutation field to delete a fund campaign."""
  deleteFundCampaign(input: MutationDeleteFundCampaignInput!): FundCampaign

  """Mutation field to delete a fund campaign pledge."""
  deleteFundCampaignPledge(input: MutationDeleteFundCampaignPledgeInput!): FundCampaignPledge

  """Mutation field to delete an organization."""
  deleteOrganization(input: MutationDeleteOrganizationInput!): Organization

  """Mutation field to delete an organization membership."""
  deleteOrganizationMembership(input: MutationDeleteOrganizationMembershipInput!): Organization

  """Mutation field to delete a post."""
  deletePost(input: MutationDeletePostInput!): Post

  """Mutation field to delete a post vote."""
  deletePostVote(input: MutationDeletePostVoteInput!): Post

  """Mutation field to delete a tag."""
  deleteTag(input: MutationDeleteTagInput!): Tag

  """Mutation field to delete a user."""
  deleteUser(
    """Input required to delete a user."""
    input: MutationDeleteUserInput!
  ): User

  """Mutation field to sign up to talawa."""
  signUp(
    """Input required to sign up to talawa."""
    input: MutationSignUpInput!
  ): AuthenticationPayload

  """Mutation field to update an advertisement."""
  updateAdvertisement(input: MutationUpdateAdvertisementInput!): Advertisement

  """Mutation field to update a comment."""
  updateComment(input: MutationUpdateCommentInput!): Comment

  """Mutation field to update a comment vote."""
  updateCommentVote(input: MutationUpdateCommentVoteInput!): Comment

  """Mutation field to update the current user."""
  updateCurrentUser(
    """Input required to update the current user."""
    input: MutationUpdateCurrentUserInput!
  ): User

  """Mutation field to update a fund."""
  updateFund(input: MutationUpdateFundInput!): Fund

  """Mutation field to update a fund campaign."""
  updateFundCampaign(input: MutationUpdateFundCampaignInput!): FundCampaign

  """Mutation field to update a fund campaign pledge."""
  updateFundCampaignPledge(input: MutationUpdateFundCampaignPledgeInput!): FundCampaignPledge

  """Mutation field to update a organization."""
  updateOrganization(input: MutationUpdateOrganizationInput!): Organization

  """Mutation field to update an organization membership."""
  updateOrganizationMembership(input: MutationUpdateOrganizationMembershipInput!): Organization

  """Mutation field to update a post."""
  updatePost(input: MutationUpdatePostInput!): Post

  """Mutation field to update a post vote."""
  updatePostVote(input: MutationUpdatePostVoteInput!): Post

  """Mutation field to update a tag."""
  updateTag(input: MutationUpdateTagInput!): Tag

  """Mutation field to update a user."""
  updateUser(
    """Input required to update a user."""
    input: MutationUpdateUserInput!
  ): User
}

""""""
input MutationCreateAdvertisementInput {
  """Attachments of the advertisement."""
  attachments: [AdvertisementAttachmentInput!]

  """Custom information about the advertisement."""
  description: String

  """Date time at which the advertised event ends."""
  endAt: DateTime!

  """Name of the advertisement."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Date time at which the advertised event starts."""
  startAt: DateTime!

  """Type of the advertisement."""
  type: AdvertisementType!
}

""""""
input MutationCreateCommentInput {
  """Body of the comment."""
  body: String!

  """Global identifier of the post on which the comment is made."""
  postId: ID!
}

""""""
input MutationCreateCommentVoteInput {
  """Global identifier of the comment that is voted."""
  commentId: ID!

  """Type of the vote."""
  type: CommentVoteType!
}

""""""
input MutationCreateFundCampaignInput {
  """Currency code of the fund campaign."""
  currencyCode: Iso4217CurrencyCode!

  """Date time at the time the fund campaign ends at."""
  endAt: DateTime!

  """Global identifier of the associated fund."""
  fundId: ID!

  """Minimum amount of money that is set as the goal for the fund campaign."""
  goalAmount: Int!

  """Name of the fund campaign."""
  name: String!

  """Date time at the time the fund campaign starts at."""
  startAt: DateTime!
}

""""""
input MutationCreateFundCampaignPledgeInput {
  """The amount of pledged money."""
  amount: Int!

  """Global identifier of the fund campaign."""
  campaignId: ID!

  """Custom information about the fund campaign pledge."""
  note: String

  """Global identifier of the user who pledged."""
  pledgerId: ID!
}

""""""
input MutationCreateFundInput {
  """Boolean to tell if the fund is tax deductible."""
  isTaxDeductible: Boolean!

  """Name of the fund."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationCreateOrganizationInput {
  """Address of the organization."""
  address: String

  """URI to the avatar of the organization."""
  avatarURI: String

  """Name of the city where the organization resides in."""
  city: String

  """Country code of the country the organization is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the organization."""
  description: String

  """Name of the organization."""
  name: String!

  """Postal code of the organization."""
  postalCode: String

  """Name of the state the organization resides in."""
  state: String
}

""""""
input MutationCreateOrganizationMembershipInput {
  """Global identifier of the associated user."""
  memberId: ID!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Role assigned to the user within the organization."""
  role: OrganizationMembershipRole
}

""""""
input MutationCreatePostInput {
  """Attachments of the post."""
  attachments: [PostAttachmentInput!]

  """Caption about the post."""
  caption: String!

  """Boolean to tell if the post is pinned"""
  isPinned: Boolean

  """
  Global identifier of the associated organization in which the post is posted.
  """
  organizationId: ID!
}

""""""
input MutationCreatePostVoteInput {
  """Global identifier of the post that is voted."""
  postId: ID!

  """Type of the vote."""
  type: PostVoteType!
}

""""""
input MutationCreateTagInput {
  """Boolean to tell if the tag is to be used as a tag folder."""
  isFolder: Boolean!

  """Name of the tag."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Global identifier of the parent tag."""
  parentTagId: ID
}

""""""
input MutationCreateUserInput {
  """Address of the user."""
  address: String

  """URI to the avatar of the user."""
  avatarURI: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: EmailAddress!

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Boolean to tell whether the user has verified their email address."""
  isEmailAddressVerified: Boolean!

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String!

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Password of the user to sign in to the application."""
  password: String!

  """Postal code of the user."""
  postalCode: String

  """Role assigned to the user in the application."""
  role: UserRole!

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationDeleteAdvertisementInput {
  """Global identifier of the advertisement."""
  id: ID!
}

""""""
input MutationDeleteCommentInput {
  """Global identifier of the comment."""
  id: ID!
}

""""""
input MutationDeleteCommentVoteInput {
  """Global identifier of the comment that is voted."""
  commentId: ID!

  """Global identifier of the user who voted."""
  creatorId: ID!
}

""""""
input MutationDeleteFundCampaignInput {
  """Global identifier of the fund campaign."""
  id: ID!
}

""""""
input MutationDeleteFundCampaignPledgeInput {
  """Global identifier of the fund campaign pledge."""
  id: ID!
}

""""""
input MutationDeleteFundInput {
  """Global identifier of the fund."""
  id: ID!
}

""""""
input MutationDeleteOrganizationInput {
  """Global identifier of the organization."""
  id: ID!
}

""""""
input MutationDeleteOrganizationMembershipInput {
  """Global identifier of the associated user."""
  memberId: ID!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationDeletePostInput {
  """Global identifier of the post."""
  id: ID!
}

""""""
input MutationDeletePostVoteInput {
  """Global identifier of the user who voted."""
  creatorId: ID!

  """Global identifier of the post that is voted."""
  postId: ID!
}

""""""
input MutationDeleteTagInput {
  """Global identifier of the tag."""
  id: ID!
}

""""""
input MutationDeleteUserInput {
  """Global identifier of the user."""
  id: ID!
}

""""""
input MutationSignUpInput {
  """Address of the user."""
  address: String

  """URI to the avatar of the user."""
  avatarURI: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Confirmed password of the user to sign in to the application."""
  confirmedPassword: String!

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: EmailAddress!

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String!

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Password of the user to sign in to the application."""
  password: String!

  """Postal code of the user."""
  postalCode: String

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationUpdateAdvertisementInput {
  """Custom information about the advertisement."""
  description: String

  """Date time at which the advertised event ends."""
  endAt: DateTime

  """Global identifier of the associated organization."""
  id: ID!

  """Name of the advertisement."""
  name: String

  """Date time at which the advertised event starts."""
  startAt: DateTime

  """Type of the advertisement."""
  type: AdvertisementType
}

""""""
input MutationUpdateCommentInput {
  """Body of the comment."""
  body: String

  """Global identifier of the comment."""
  id: ID!
}

""""""
input MutationUpdateCommentVoteInput {
  """Global identifier of the comment that is voted."""
  commentId: ID!

  """Type of the vote."""
  type: CommentVoteType!
}

""""""
input MutationUpdateCurrentUserInput {
  """Address of the user."""
  address: String

  """URI to the avatar of the user."""
  avatarURI: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: EmailAddress

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Password of the user to sign in to the application."""
  password: String

  """Postal code of the user."""
  postalCode: String

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationUpdateFundCampaignInput {
  """Date time at the time the fund campaign ends at."""
  endAt: DateTime

  """Minimum amount of money that is set as the goal for the fund campaign."""
  goalAmount: Int

  """Global identifier of the associated fund campaign."""
  id: ID!

  """Name of the fundCampaign."""
  name: String

  """Date time at the time the fund campaign starts at."""
  startAt: DateTime
}

""""""
input MutationUpdateFundCampaignPledgeInput {
  """The amount of pledged money."""
  amount: Int

  """Global identifier of the associated fund campaign pledge."""
  id: ID!

  """Custom information about the fund campaign pledge."""
  note: String
}

""""""
input MutationUpdateFundInput {
  """Global identifier of the associated organization."""
  id: ID!

  """Boolean to tell if the fund is tax deductible."""
  isTaxDeductible: Boolean

  """Name of the fund."""
  name: String
}

""""""
input MutationUpdateOrganizationInput {
  """Address of the organization."""
  address: String

  """URI to the avatar of the organization."""
  avatarURI: String

  """Name of the city where the organization resides in."""
  city: String

  """Country code of the country the organization is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the organization."""
  description: String

  """Global identifier of the organization."""
  id: ID!

  """Name of the organization."""
  name: String

  """Postal code of the organization."""
  postalCode: String

  """Name of the state the organization resides in."""
  state: String
}

""""""
input MutationUpdateOrganizationMembershipInput {
  """Global identifier of the associated user."""
  memberId: ID!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Role assigned to the user within the organization."""
  role: OrganizationMembershipRole
}

""""""
input MutationUpdatePostInput {
  """Caption about the post."""
  caption: String

  """Global identifier of the post."""
  id: ID!

  """Boolean to tell if the post is pinned"""
  isPinned: Boolean
}

""""""
input MutationUpdatePostVoteInput {
  """Global identifier of the voted post."""
  postId: ID!

  """Type of the vote."""
  type: PostVoteType!
}

""""""
input MutationUpdateTagInput {
  """Global identifier of the tag."""
  id: ID!

  """Name of the tag."""
  name: String

  """Global identifier of associated parent tag."""
  parentTagId: ID
}

""""""
input MutationUpdateUserInput {
  """Address of the user."""
  address: String

  """URI to the avatar of the user."""
  avatarURI: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: EmailAddress

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Global identifier of the user."""
  id: ID!

  """Boolean to tell whether the user has verified their email address."""
  isEmailAddressVerified: Boolean

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Password of the user to sign in to the application."""
  password: String

  """Postal code of the user."""
  postalCode: String

  """Role assigned to the user in the application."""
  role: UserRole

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

type Organization {
  """Address of the organization."""
  address: String

  """
  GraphQL connection to traverse through the advertisements associated to the organization.
  """
  advertisements(after: String, before: String, first: Int, last: Int): OrganizationAdvertisementsConnection

  """URI to the avatar of the organization."""
  avatarURI: String

  """Name of the city where the organization exists in."""
  city: String

  """Country code of the country the organization is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Date time at the time the organization was created."""
  createdAt: DateTime

  """User who created the organization."""
  creator: User

  """Custom information about the organization."""
  description: String

  """
  GraphQL connection to traverse through the funds that are associated to the organization.
  """
  funds(after: String, before: String, first: Int, last: Int): OrganizationFundsConnection

  """Global identifier of the organization."""
  id: ID!

  """
  GraphQL connection to traverse through the users that are members of the organization.
  """
  members(after: String, before: String, first: Int, last: Int): OrganizationMembersConnection

  """Name of the organization."""
  name: String

  """
  GraphQL connection to traverse through the pinned posts associated to the organization.
  """
  pinnedPosts(after: String, before: String, first: Int, last: Int): OrganizationPinnedPostsConnection

  """Total number of pinned posts in the organization."""
  pinnedPostsCount: Int

  """Postal code of the organization."""
  postalCode: String

  """
  GraphQL connection to traverse through the posts associated to the organization.
  """
  posts(after: String, before: String, first: Int, last: Int): OrganizationPostsConnection

  """Total number of posts in the organization."""
  postsCount: Int

  """Name of the state the organization exists in."""
  state: String

  """
  GraphQL connection to traverse through the tags associated to the organization.
  """
  tags(after: String, before: String, first: Int, last: Int): OrganizationTagsConnection

  """Date time at the time the organization was last updated."""
  updatedAt: DateTime

  """User who last updated the organization."""
  updater: User
}

""""""
type OrganizationAdvertisementsConnection {
  edges: [OrganizationAdvertisementsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationAdvertisementsConnectionEdge {
  cursor: String!
  node: Advertisement
}

""""""
type OrganizationFundsConnection {
  edges: [OrganizationFundsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationFundsConnectionEdge {
  cursor: String!
  node: Fund
}

""""""
type OrganizationMembersConnection {
  edges: [OrganizationMembersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationMembersConnectionEdge {
  cursor: String!
  node: User
}

""""""
enum OrganizationMembershipRole {
  administrator
  regular
}

""""""
type OrganizationPinnedPostsConnection {
  edges: [OrganizationPinnedPostsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationPinnedPostsConnectionEdge {
  cursor: String!
  node: Post
}

""""""
type OrganizationPostsConnection {
  edges: [OrganizationPostsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationPostsConnectionEdge {
  cursor: String!
  node: Post
}

""""""
type OrganizationTagsConnection {
  edges: [OrganizationTagsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationTagsConnectionEdge {
  cursor: String!
  node: Tag
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Post {
  """Array of attachments."""
  attachments: [PostAttachment!]

  """Caption for the post."""
  caption: String

  """
  GraphQL connection to traverse through the comments associated to the post.
  """
  comments(after: String, before: String, first: Int, last: Int): PostCommentsConnection

  """Total number of comments on the post."""
  commentsCount: Int

  """Date time at the time the post was created."""
  createdAt: DateTime

  """User who created the post."""
  creator: User

  """
  GraphQL connection to traverse through the voters that down voted the post.
  """
  downVoters(after: String, before: String, first: Int, last: Int): PostDownVotersConnection

  """Total number of down votes on the post."""
  downVotesCount: Int

  """Global identifier of the post."""
  id: ID!

  """Organization which the post belongs to."""
  organization: Organization

  """Date time at the time the post was pinned."""
  pinnedAt: DateTime

  """
  GraphQL connection to traverse through the voters that up voted the post.
  """
  upVoters(after: String, before: String, first: Int, last: Int): PostUpVotersConnection

  """Total number of up votes on the post."""
  upVotesCount: Int

  """Date time at the time the post was last updated."""
  updatedAt: DateTime

  """User who last updated the post."""
  updater: User
}

""""""
type PostAttachment {
  """Type of the attachment."""
  type: PostAttachmentType

  """URI to the attachment."""
  uri: String
}

""""""
input PostAttachmentInput {
  """Type of the attachment."""
  type: PostAttachmentType!

  """URI to the attachment."""
  uri: String!
}

""""""
enum PostAttachmentType {
  image
  video
}

""""""
type PostCommentsConnection {
  edges: [PostCommentsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type PostCommentsConnectionEdge {
  cursor: String!
  node: Comment
}

""""""
type PostDownVotersConnection {
  edges: [PostDownVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type PostDownVotersConnectionEdge {
  cursor: String!
  node: User
}

""""""
type PostUpVotersConnection {
  edges: [PostUpVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type PostUpVotersConnectionEdge {
  cursor: String!
  node: User
}

""""""
enum PostVoteType {
  down_vote
  up_vote
}

type Query {
  """Query field to read an advertisement."""
  advertisement(input: QueryAdvertisementInput!): Advertisement

  """Query field to read a comment."""
  comment(input: QueryCommentInput!): Comment

  """Query field to read a user."""
  currentUser: User

  """Query field to read a fund."""
  fund(input: QueryFundInput!): Fund

  """Query field to read a fund campaign."""
  fundCampaign(input: QueryFundCampaignInput!): FundCampaign

  """Query field to read a fund campaign pledge."""
  fundCampaignPledge(input: QueryFundCampaignPledgeInput!): FundCampaignPledge

  """Query field to read an organization."""
  organization(
    """Input required to read an organization."""
    input: QueryOrganizationInput!
  ): Organization

  """Query field to read a post."""
  post(input: QueryPostInput!): Post

  """
  Query field to renew the authentication token of an authenticated client for signing in to talawa.
  """
  renewAuthenticationToken: String

  """Query field for a client to sign in to talawa."""
  signIn(
    """Input required to sign in to talawa."""
    input: QuerySignInInput!
  ): AuthenticationPayload

  """Query field to read a tag."""
  tag(input: QueryTagInput!): Tag

  """Query field to read a user."""
  user(
    """Input required to read a user."""
    input: QueryUserInput
  ): User
}

""""""
input QueryAdvertisementInput {
  """Global id of the advertisement."""
  id: String!
}

""""""
input QueryCommentInput {
  """Global id of the comment."""
  id: String!
}

""""""
input QueryFundCampaignInput {
  """Global id of the fund campaign."""
  id: String!
}

""""""
input QueryFundCampaignPledgeInput {
  """Global id of the fund campaign pledge."""
  id: String!
}

""""""
input QueryFundInput {
  """Global id of the fund."""
  id: String!
}

""""""
input QueryOrganizationInput {
  """Global id of the organization."""
  id: String!
}

""""""
input QueryPostInput {
  """Global id of the post."""
  id: String!
}

""""""
input QuerySignInInput {
  """Email address of the user."""
  emailAddress: EmailAddress!

  """Password of the user to sign in to talawa."""
  password: String!
}

""""""
input QueryTagInput {
  """Global id of the tag."""
  id: String!
}

""""""
input QueryUserInput {
  """Global id of the user."""
  id: String!
}

type Tag {
  """
  GraphQL connection to traverse through the tags that have the tag as their parent tag.
  """
  childTags(after: String, before: String, first: Int, last: Int): TagChildTagsConnection

  """Date time at the time the tag was created."""
  createdAt: DateTime

  """User who created the tag."""
  creator: User

  """Global identifier of the tag."""
  id: ID!

  """Boolean to tell if the tag is to be used as a tag folder."""
  isFolder: Boolean

  """Name of the tag."""
  name: String

  """Organization which the tag belongs to."""
  organization: Organization

  """Parent tag of the tag."""
  parentTagFolder: Tag

  """Date time at the time the tag was last updated."""
  updatedAt: DateTime

  """User who last updated the tag."""
  updater: User
}

""""""
type TagChildTagsConnection {
  edges: [TagChildTagsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type TagChildTagsConnectionEdge {
  cursor: String!
  node: Tag
}

type User {
  """Address of the user."""
  address: String

  """URI to the avatar of the user."""
  avatarURI: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Date time at the time the user was created."""
  createdAt: DateTime

  """User who created the user."""
  creator: User

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: EmailAddress

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Global identifier of the user."""
  id: ID!

  """Boolean to tell whether the user has verified their email address."""
  isEmailAddressVerified: Boolean

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """
  GraphQL connection to traverse through the organizations the user is a member of.
  """
  organizationsWhereMember(after: String, before: String, first: Int, last: Int): UserOrganizationsWhereMemberConnection

  """Postal code of the user."""
  postalCode: String

  """Role assigned to the user in the application."""
  role: UserRole

  """Name of the state the user resides in."""
  state: String

  """Date time at the time the user was last updated."""
  updatedAt: DateTime

  """User who last updated the user."""
  updater: User

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
enum UserEducationGrade {
  grade_1
  grade_2
  grade_3
  grade_4
  grade_5
  grade_6
  grade_7
  grade_8
  grade_9
  grade_10
  grade_11
  grade_12
  graduate
  kg
  no_grade
  pre_kg
}

""""""
enum UserEmploymentStatus {
  full_time
  part_time
  unemployed
}

""""""
enum UserMaritalStatus {
  divorced
  engaged
  married
  seperated
  single
  widowed
}

""""""
enum UserNatalSex {
  female
  intersex
  male
}

""""""
type UserOrganizationsWhereMemberConnection {
  edges: [UserOrganizationsWhereMemberConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type UserOrganizationsWhereMemberConnectionEdge {
  cursor: String!
  node: Organization
}

""""""
enum UserRole {
  administrator
  regular
}