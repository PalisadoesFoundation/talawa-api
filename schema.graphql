type Advertisement {
  """Array of attachments."""
  attachments: [AdvertisementAttachment!]

  """Date time at the time the advertisement was created."""
  createdAt: DateTime

  """User who created the advertisement."""
  creator: User

  """Custom information about the advertisement."""
  description: String

  """Date time at the time the advertised event ends at."""
  endAt: DateTime

  """Global identifier of the advertisement."""
  id: ID!

  """Name of the advertisement."""
  name: String

  """Organization which the advertisement belongs to."""
  organization: Organization

  """Date time at the time the advertised event starts at."""
  startAt: DateTime

  """Type of the advertisement."""
  type: AdvertisementType

  """Date time at the time the advertisement was last updated."""
  updatedAt: DateTime

  """User who last updated the advertisement."""
  updater: User
}

type AdvertisementAttachment {
  """Mime type of the attachment."""
  mimeType: String

  """URL to the attachment."""
  url: String
}

"""Possible variants of the type of an advertisement."""
enum AdvertisementType {
  banner
  menu
  pop_up
}

type AgendaFolder {
  """
  GraphQL connection to traverse through the agenda folders that have the agenda folder as a parent folder.
  """
  childFolders(after: String, before: String, first: Int, last: Int): AgendaFolderChildFoldersConnection

  """Date time at the time the agenda folder was created."""
  createdAt: DateTime

  """User who created the agenda folder."""
  creator: User

  """
  Event for which the agenda folder contains agenda items constituting a part of the agenda.
  """
  event: Event

  """Global identifier of the agenda folder."""
  id: ID!

  """
  Boolean to tell if the agenda folder is meant to be a folder for agenda items or a parent for agenda folders.
  """
  isAgendaItemFolder: Boolean

  """
  GraphQL connection to traverse through the agenda items contained within the agenda folder.
  """
  items(after: String, before: String, first: Int, last: Int): AgendaFolderItemsConnection

  """Name of the agenda folder."""
  name: String

  """Agenda folder that is a parent folder to the agenda folder."""
  parentFolder: AgendaFolder

  """Date time at the time the agenda folder was last updated."""
  updatedAt: DateTime

  """User who last updated the agenda folder."""
  updater: User
}

""""""
type AgendaFolderChildFoldersConnection {
  edges: [AgendaFolderChildFoldersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type AgendaFolderChildFoldersConnectionEdge {
  cursor: String!
  node: AgendaFolder
}

""""""
type AgendaFolderItemsConnection {
  edges: [AgendaFolderItemsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type AgendaFolderItemsConnectionEdge {
  cursor: String!
  node: AgendaItem
}

type AgendaItem {
  """Date time at the time the agenda item was last created."""
  createdAt: DateTime

  """User who created the agenda item."""
  creator: User

  """Custom information about the agenda item."""
  description: String

  """Duration of the agenda item."""
  duration: String

  """Agenda folder within which the agenda item in contained."""
  event: AgendaFolder

  """Global identifier of the agenda item."""
  id: ID!

  """
  Key of the agenda item if it's of a "song" type. More information at [this](https://en.wikipedia.org/wiki/Key_(music)) link.
  """
  key: String

  """Name of the agenda item."""
  name: String

  """Type of the agenda item."""
  type: AgendaItemType

  """Date time at the time the agenda item was last updated."""
  updatedAt: DateTime

  """User who last updated the agenda item."""
  updater: User
}

"""Possible variants of the type of an agenda item."""
enum AgendaItemType {
  general
  note
  scripture
  song
}

""""""
type AuthenticationPayload {
  """
  This is the authentication token using which a user can sign in to talawa.
  """
  authenticationToken: String

  """"""
  user: User
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Chat {
  """Mime type of the avatar of the chat."""
  avatarMimeType: String

  """URL to the avatar of the chat."""
  avatarURL: String

  """Date time at the time the chat was first created."""
  createdAt: DateTime

  """User who created the chat."""
  creator: User

  """Custom information about the chat."""
  description: String

  """Global identifier of the chat."""
  id: ID!

  """
  GraphQL connection to traverse through the users that are members of the chat.
  """
  members(after: String, before: String, first: Int, last: Int): ChatMembersConnection

  """
  GraphQL connection to traverse through the messages created within the chat.
  """
  messages(after: String, before: String, first: Int, last: Int): ChatMessagesConnection

  """Name of the chat."""
  name: String

  """Organization which the chat belongs to."""
  organization: Organization

  """Date time at the time the chat was last updated."""
  updatedAt: DateTime

  """User who last updated the chat."""
  updater: User
}

""""""
type ChatMembersConnection {
  edges: [ChatMembersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type ChatMembersConnectionEdge {
  cursor: String!
  node: User
}

"""Possible variants of the role assigned to a user within a chat."""
enum ChatMembershipRole {
  administrator
  regular
}

type ChatMessage {
  """Body of the chat message."""
  body: String

  """Chat which the chat message belongs to."""
  chat: Chat

  """Date time at the time the chat message was created."""
  createdAt: DateTime

  """User who created the chat message."""
  creator: User

  """Global identifier of the chat message."""
  id: ID!

  """Parent message of the chat message."""
  parentMessage: ChatMessage

  """Date time at the time the chat message was last updated."""
  updatedAt: DateTime
}

""""""
type ChatMessagesConnection {
  edges: [ChatMessagesConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type ChatMessagesConnectionEdge {
  cursor: String!
  node: ChatMessage
}

type Comment {
  """Body of the comment."""
  body: String

  """Date time at the time the comment was created."""
  createdAt: DateTime

  """User who created the comment."""
  creator: User

  """
  GraphQL connection to traverse through the users that down voted the comment.
  """
  downVoters(after: String, before: String, first: Int, last: Int): CommentDownVotersConnection

  """Total number of down votes on the comment."""
  downVotesCount: Int

  """Global identifier of the comment."""
  id: ID!

  """Post which the comment belongs to."""
  post: Post

  """
  GraphQL connection to traverse through the users that up voted the comment.
  """
  upVoters(after: String, before: String, first: Int, last: Int): CommentUpVotersConnection

  """Total number of up votes on the comment."""
  upVotesCount: Int

  """Date time at the time the comment was last updated."""
  updatedAt: DateTime
}

""""""
type CommentDownVotersConnection {
  edges: [CommentDownVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type CommentDownVotersConnectionEdge {
  cursor: String!
  node: User
}

""""""
type CommentUpVotersConnection {
  edges: [CommentUpVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type CommentUpVotersConnectionEdge {
  cursor: String!
  node: User
}

"""Possible variants of the type of of a vote on a comment."""
enum CommentVoteType {
  down_vote
  up_vote
}

type Community {
  """Date time at the time the community was created."""
  createdAt: DateTime

  """URL to the facebook account of the community."""
  facebookURL: String

  """URL to the gitGub account of the community."""
  githubURL: String

  """Global identifier of the community."""
  id: ID!

  """ Duration in seconds it should take for inactive clients to get timed out of their authenticated session within client-side talawa applications.
  """
  inactivityTimeoutDuration: Int

  """URL to the instagram account of the community."""
  instagramURL: String

  """URL to the linkedin account of the community."""
  linkedinURL: String

  """Mime type of the avatar of the community."""
  logoMimeType: String

  """URL to the logo of the community."""
  logoURL: String

  """Name of the community."""
  name: String

  """URL to the reddit account of the community."""
  redditURL: String

  """URL to the slack account of the community."""
  slackURL: String

  """Date time at the time the community was last updated."""
  updatedAt: DateTime

  """User who last updated the community."""
  updater: User

  """URL to the website of the community."""
  websiteURL: String

  """URL to the x account of the community."""
  xURL: String

  """URL to the youtube account of the community."""
  youtubeURL: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
  """
  GraphQL connection to traverse through the agenda folders that contain agenda items constituting a part of the agenda for the event.
  """
  agendaFolders(after: String, before: String, first: Int, last: Int): EventAgendaFoldersConnection

  """Array of attachments."""
  attachments: [EventAttachment!]

  """Date time at the time the event was created."""
  createdAt: DateTime

  """User who created the event."""
  creator: User

  """Custom information about the event."""
  description: String

  """Date time at the time the event ends at."""
  endAt: DateTime

  """Global identifier of the event."""
  id: ID!

  """Name of the event."""
  name: String

  """Organization the event belongs to."""
  organization: Organization

  """Date time at the time the event starts at."""
  startAt: DateTime

  """Date time at the time the event was last updated."""
  updatedAt: DateTime

  """User who last updated the event."""
  updater: User

  """
  GraphQL connection to traverse through the venues that are booked for the event.
  """
  venues(after: String, before: String, first: Int, last: Int): EventVenuesConnection
}

""""""
type EventAgendaFoldersConnection {
  edges: [EventAgendaFoldersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type EventAgendaFoldersConnectionEdge {
  cursor: String!
  node: AgendaFolder
}

type EventAttachment {
  """Mime type of the attachment."""
  mimeType: String

  """URL to the attachment."""
  url: String
}

""""""
type EventVenuesConnection {
  edges: [EventVenuesConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type EventVenuesConnectionEdge {
  cursor: String!
  node: Venue
}

type Fund {
  """GraphQL connection to traverse through the campaigns for the fund."""
  campaigns(after: String, before: String, first: Int, last: Int): FundCampaignsConnection

  """Date time at the time the fund was created."""
  createdAt: DateTime

  """User who created the fund."""
  creator: User

  """Global identifier of the fund."""
  id: ID!

  """Boolean to tell if the fund is tax deductible."""
  isTaxDeductible: Boolean

  """Name of the fund."""
  name: String

  """Organization which the fund belongs to."""
  organization: Organization

  """Date time at the time the fund was last updated."""
  updatedAt: DateTime

  """User who last updated the fund."""
  updater: User
}

type FundCampaign {
  """Date time at the time the fund campaign was created."""
  createdAt: DateTime

  """User who created the fund campaign."""
  creator: User

  """Currency code of the fund campaign."""
  currencyCode: Iso4217CurrencyCode

  """Date time at the time the fund campaign ends at."""
  endAt: DateTime

  """Fund which the fund campaign belongs to."""
  fund: Fund

  """Minimum amount of money that is set as the goal for the fund campaign."""
  goalAmount: Int

  """Global identifier of the fund campaign."""
  id: ID!

  """Name of the fund campaign."""
  name: String

  """Total amount of money pledged under the fund campaign."""
  pledgedAmount: BigInt

  """
  GraphQL connection to traverse through the pledges made under the fund campaign.
  """
  pledges(after: String, before: String, first: Int, last: Int): FundCampaignPledgesConnection

  """Date time at the time the fund campaign starts at."""
  startAt: DateTime

  """Date time at the time the fund campaign was last updated."""
  updatedAt: DateTime

  """User who last updated the fund campaign."""
  updater: User
}

type FundCampaignPledge {
  """The amount of pledged money."""
  amount: Int

  """Fund campaign which the fund campaign pledge is associated to."""
  campaign: FundCampaign

  """Date time at the time the fund campaign pledge was created."""
  createdAt: DateTime

  """User who created the fund campaign pledge."""
  creator: User

  """Global identifier of the fund campaign pledge."""
  id: ID!

  """Custom information about the fund campaign pledge."""
  note: String

  """User on whose behalf the fund campaign pledge is created."""
  pledger: User

  """Date time at the time the fund campaign pledge was last updated."""
  updatedAt: DateTime

  """User who last updated the fund campaign pledge."""
  updater: User
}

""""""
type FundCampaignPledgesConnection {
  edges: [FundCampaignPledgesConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type FundCampaignPledgesConnectionEdge {
  cursor: String!
  node: FundCampaignPledge
}

""""""
type FundCampaignsConnection {
  edges: [FundCampaignsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type FundCampaignsConnectionEdge {
  cursor: String!
  node: FundCampaign
}

"""
Possible variants of the two-letter language code defined in ISO 639-1, part of the ISO 639 standard published by the International Organization for Standardization (ISO), to represent natural languages.
"""
enum Iso639Set1LanguageCode {
  aa
  ab
  ae
  af
  ak
  am
  an
  ar
  as
  av
  ay
  az
  ba
  be
  bg
  bi
  bm
  bn
  bo
  br
  bs
  ca
  ce
  ch
  co
  cr
  cs
  cu
  cv
  cy
  da
  de
  dv
  dz
  ee
  el
  en
  eo
  es
  et
  eu
  fa
  ff
  fi
  fj
  fo
  fr
  fy
  ga
  gd
  gl
  gn
  gu
  gv
  ha
  he
  hi
  ho
  hr
  ht
  hu
  hy
  hz
  ia
  id
  ie
  ig
  ii
  ik
  io
  is
  it
  iu
  ja
  jv
  ka
  kg
  ki
  kj
  kk
  kl
  km
  kn
  ko
  kr
  ks
  ku
  kv
  kw
  ky
  la
  lb
  lg
  li
  ln
  lo
  lt
  lu
  lv
  mg
  mh
  mi
  mk
  ml
  mn
  mr
  ms
  mt
  my
  na
  nb
  nd
  ne
  ng
  nl
  nn
  no
  nr
  nv
  ny
  oc
  oj
  om
  or
  os
  pa
  pi
  pl
  ps
  pt
  qu
  rm
  rn
  ro
  ru
  rw
  sa
  sc
  sd
  se
  sg
  si
  sk
  sl
  sm
  sn
  so
  sq
  sr
  ss
  st
  su
  sv
  sw
  ta
  te
  tg
  th
  ti
  tk
  tl
  tn
  to
  tr
  ts
  tt
  tw
  ty
  ug
  uk
  ur
  uz
  ve
  vi
  vo
  wa
  wo
  xh
  yi
  yo
  za
  zh
  zu
}

"""
Possible variants of the two-letter country code defined in ISO 3166-1, part of the ISO 3166 standard published by the International Organization for Standardization (ISO), to represent countries, dependent territories, and special areas of geographical interest.
"""
enum Iso3166Alpha2CountryCode {
  ad
  ae
  af
  ag
  ai
  al
  am
  ao
  aq
  ar
  as
  at
  au
  aw
  ax
  az
  ba
  bb
  bd
  be
  bf
  bg
  bh
  bi
  bj
  bl
  bm
  bn
  bo
  bq
  br
  bs
  bt
  bv
  bw
  by
  bz
  ca
  cc
  cd
  cf
  cg
  ch
  ci
  ck
  cl
  cm
  cn
  co
  cr
  cu
  cv
  cw
  cx
  cy
  cz
  de
  dj
  dk
  dm
  do
  dz
  ec
  ee
  eg
  eh
  er
  es
  et
  fi
  fj
  fk
  fm
  fo
  fr
  ga
  gb
  gd
  ge
  gf
  gg
  gh
  gi
  gl
  gm
  gn
  gp
  gq
  gr
  gs
  gt
  gu
  gw
  gy
  hk
  hm
  hn
  hr
  ht
  hu
  id
  ie
  il
  im
  in
  io
  iq
  ir
  is
  it
  je
  jm
  jo
  jp
  ke
  kg
  kh
  ki
  km
  kn
  kp
  kr
  kw
  ky
  kz
  la
  lb
  lc
  li
  lk
  lr
  ls
  lt
  lu
  lv
  ly
  ma
  mc
  md
  me
  mf
  mg
  mh
  mk
  ml
  mm
  mn
  mo
  mp
  mq
  mr
  ms
  mt
  mu
  mv
  mw
  mx
  my
  mz
  na
  nc
  ne
  nf
  ng
  ni
  nl
  no
  np
  nr
  nu
  nz
  om
  pa
  pe
  pf
  pg
  ph
  pk
  pl
  pm
  pn
  pr
  ps
  pt
  pw
  py
  qa
  re
  ro
  rs
  ru
  rw
  sa
  sb
  sc
  sd
  se
  sg
  sh
  si
  sj
  sk
  sl
  sm
  sn
  so
  sr
  ss
  st
  sv
  sx
  sy
  sz
  tc
  td
  tf
  tg
  th
  tj
  tk
  tl
  tm
  tn
  to
  tr
  tt
  tv
  tw
  tz
  ua
  ug
  um
  us
  uy
  uz
  va
  vc
  ve
  vg
  vi
  vn
  vu
  wf
  ws
  ye
  yt
  za
  zm
  zw
}

"""
Possible variants of the currency code defined in ISO 4217 standard published by the International Organization for Standardization (ISO) which defines alpha codes and numeric codes for the representation of currencies and provides information about the relationships between individual currencies and their minor units.
"""
enum Iso4217CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLE
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UYW
  UZS
  VED
  VES
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWG
}

type Mutation {
  """Mutation field to create an advertisement."""
  createAdvertisement(input: MutationCreateAdvertisementInput!): Advertisement

  """Mutation field to create an agenda folder."""
  createAgendaFolder(input: MutationCreateAgendaFolderInput!): AgendaFolder

  """Mutation field to create an agenda item."""
  createAgendaItem(input: MutationCreateAgendaItemInput!): AgendaItem

  """Mutation field to create a chat."""
  createChat(input: MutationCreateChatInput!): Chat

  """Mutation field to create a chat membership."""
  createChatMembership(input: MutationCreateChatMembershipInput!): Chat

  """Mutation field to create a chat message."""
  createChatMessage(input: MutationCreateChatMessageInput!): ChatMessage

  """Mutation field to create a comment."""
  createComment(input: MutationCreateCommentInput!): Comment

  """Mutation field to create a comment vote."""
  createCommentVote(input: MutationCreateCommentVoteInput!): Comment

  """Mutation field to create an event."""
  createEvent(input: MutationCreateEventInput!): Event

  """Mutation field to create a fund."""
  createFund(input: MutationCreateFundInput!): Fund

  """Mutation field to create a fund campaign."""
  createFundCampaign(input: MutationCreateFundCampaignInput!): FundCampaign

  """Mutation field to create a fund campaign pledge."""
  createFundCampaignPledge(input: MutationCreateFundCampaignPledgeInput!): FundCampaignPledge

  """Mutation field to create an organization."""
  createOrganization(input: MutationCreateOrganizationInput!): Organization

  """Mutation field to create an organization membership."""
  createOrganizationMembership(input: MutationCreateOrganizationMembershipInput!): Organization

  """Mutation field to create a post."""
  createPost(input: MutationCreatePostInput!): Post

  """Mutation field to create a post vote."""
  createPostVote(input: MutationCreatePostVoteInput!): Post

  """Mutation field to create a tag."""
  createTag(input: MutationCreateTagInput!): Tag

  """Mutation field to create a tag folder."""
  createTagFolder(input: MutationCreateTagFolderInput!): TagFolder

  """Mutation field to create a user."""
  createUser(input: MutationCreateUserInput!): AuthenticationPayload

  """Mutation field to create a venue."""
  createVenue(input: MutationCreateVenueInput!): Venue

  """Mutation field to create a venue booking."""
  createVenueBooking(input: MutationCreateVenueBookingInput!): Venue

  """Mutation field to delete an advertisement."""
  deleteAdvertisement(input: MutationDeleteAdvertisementInput!): Advertisement

  """Mutation field to delete an agenda folder."""
  deleteAgendaFolder(input: MutationDeleteAgendaFolderInput!): AgendaFolder

  """Mutation field to delete an agenda item."""
  deleteAgendaItem(input: MutationDeleteAgendaItemInput!): AgendaItem

  """Mutation field to delete a chat."""
  deleteChat(input: MutationDeleteChatInput!): Chat

  """Mutation field to delete a chat membership."""
  deleteChatMembership(input: MutationDeleteChatMembershipInput!): Chat

  """Mutation field to delete a chat message."""
  deleteChatMessage(input: MutationDeleteChatMessageInput!): ChatMessage

  """Mutation field to delete a comment."""
  deleteComment(input: MutationDeleteCommentInput!): Comment

  """Mutation field to delete a comment vote."""
  deleteCommentVote(input: MutationDeleteCommentVoteInput!): Comment

  """Mutation field to delete the current user."""
  deleteCurrentUser: User

  """Mutation field to delete an event."""
  deleteEvent(input: MutationDeleteEventInput!): Event

  """Mutation field to delete a fund."""
  deleteFund(input: MutationDeleteFundInput!): Fund

  """Mutation field to delete a fund campaign."""
  deleteFundCampaign(input: MutationDeleteFundCampaignInput!): FundCampaign

  """Mutation field to delete a fund campaign pledge."""
  deleteFundCampaignPledge(input: MutationDeleteFundCampaignPledgeInput!): FundCampaignPledge

  """Mutation field to delete an organization."""
  deleteOrganization(input: MutationDeleteOrganizationInput!): Organization

  """Mutation field to delete an organization membership."""
  deleteOrganizationMembership(input: MutationDeleteOrganizationMembershipInput!): Organization

  """Mutation field to delete a post."""
  deletePost(input: MutationDeletePostInput!): Post

  """Mutation field to delete a post vote."""
  deletePostVote(input: MutationDeletePostVoteInput!): Post

  """Mutation field to delete a tag."""
  deleteTag(input: MutationDeleteTagInput!): Tag

  """Mutation field to delete a tagFolder."""
  deleteTagFolder(input: MutationDeleteTagFolderInput!): TagFolder

  """Mutation field to delete a user."""
  deleteUser(input: MutationDeleteUserInput!): User

  """Mutation field to delete a venue."""
  deleteVenue(input: MutationDeleteVenueInput!): Venue

  """Mutation field to delete a venue booking."""
  deleteVenueBooking(input: MutationDeleteVenueBookingInput!): Venue

  """Mutation field to sign up to talawa."""
  signUp(input: MutationSignUpInput!): AuthenticationPayload

  """Mutation field to update an advertisement."""
  updateAdvertisement(input: MutationUpdateAdvertisementInput!): Advertisement

  """Mutation field to update an agenda folder."""
  updateAgendaFolder(input: MutationUpdateAgendaFolderInput!): AgendaFolder

  """Mutation field to update an agenda item."""
  updateAgendaItem(input: MutationUpdateAgendaItemInput!): AgendaItem

  """Mutation field to update a chat."""
  updateChat(input: MutationUpdateChatInput!): Chat

  """Mutation field to update a chat membership."""
  updateChatMembership(input: MutationUpdateChatMembershipInput!): Chat

  """Mutation field to update a chat message."""
  updateChatMessage(input: MutationUpdateChatMessageInput!): ChatMessage

  """Mutation field to update a comment."""
  updateComment(input: MutationUpdateCommentInput!): Comment

  """Mutation field to update a comment vote."""
  updateCommentVote(input: MutationUpdateCommentVoteInput!): Comment

  """Mutation field to update the community."""
  updateCommunity(input: MutationUpdateCommunityInput!): Community

  """Mutation field to update the current user."""
  updateCurrentUser(input: MutationUpdateCurrentUserInput!): User

  """Mutation field to update an event."""
  updateEvent(input: MutationUpdateEventInput!): Event

  """Mutation field to update a fund."""
  updateFund(input: MutationUpdateFundInput!): Fund

  """Mutation field to update a fund campaign."""
  updateFundCampaign(input: MutationUpdateFundCampaignInput!): FundCampaign

  """Mutation field to update a fund campaign pledge."""
  updateFundCampaignPledge(input: MutationUpdateFundCampaignPledgeInput!): FundCampaignPledge

  """Mutation field to update a organization."""
  updateOrganization(input: MutationUpdateOrganizationInput!): Organization

  """Mutation field to update an organization membership."""
  updateOrganizationMembership(input: MutationUpdateOrganizationMembershipInput!): Organization

  """Mutation field to update a post."""
  updatePost(input: MutationUpdatePostInput!): Post

  """Mutation field to update a post vote."""
  updatePostVote(input: MutationUpdatePostVoteInput!): Post

  """Mutation field to update a tag."""
  updateTag(input: MutationUpdateTagInput!): Tag

  """Mutation field to update a tag folder."""
  updateTagFolder(input: MutationUpdateTagFolderInput!): TagFolder

  """Mutation field to update a user."""
  updateUser(input: MutationUpdateUserInput!): User

  """Mutation field to update a venue."""
  updateVenue(input: MutationUpdateVenueInput!): Venue
}

""""""
input MutationCreateAdvertisementInput {
  """Attachments of the advertisement."""
  attachments: [Upload!]

  """Custom information about the advertisement."""
  description: String

  """Date time at which the advertised event ends."""
  endAt: DateTime!

  """Name of the advertisement."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Date time at which the advertised event starts."""
  startAt: DateTime!

  """Type of the advertisement."""
  type: AdvertisementType!
}

""""""
input MutationCreateAgendaFolderInput {
  """Global identifier of the event the agenda folder is associated to."""
  eventId: ID!

  """
  Boolean to tell if the agenda folder is meant to be a folder for agenda items or a parent folder for other agenda folders.
  """
  isAgendaItemFolder: Boolean!

  """Name of the agenda folder."""
  name: String!

  """
  Global identifier of the agenda folder the agenda folder is contained within.
  """
  parentFolderId: ID
}

""""""
input MutationCreateAgendaItemInput {
  """Custom information about the agenda item."""
  description: String

  """Duration of the agenda item."""
  duration: String

  """
  Global identifier of the agenda folder the agenda item is associated to.
  """
  folderId: ID!

  """
  Key of the agenda item if it's of a "song" type. More information at [this](https://en.wikipedia.org/wiki/Key_(music)) link.
  """
  key: String

  """Name of the agenda item."""
  name: String!

  """Type of the agenda item."""
  type: AgendaItemType!
}

""""""
input MutationCreateChatInput {
  """Avatar of the chat."""
  avatar: Upload

  """Custom information about the chat."""
  description: String

  """Name of the chat."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationCreateChatMembershipInput {
  """Global identifier of the associated chat."""
  chatId: ID!

  """Global identifier of the associated user."""
  memberId: ID!

  """Role assigned to the user within the chat."""
  role: ChatMembershipRole
}

""""""
input MutationCreateChatMessageInput {
  """Body of the chat message."""
  body: String!

  """Global identifier of the associated chat."""
  chatId: ID!

  """Global identifier of the associated parent message."""
  parentMessageId: ID!
}

""""""
input MutationCreateCommentInput {
  """Body of the comment."""
  body: String!

  """Global identifier of the post on which the comment is made."""
  postId: ID!
}

""""""
input MutationCreateCommentVoteInput {
  """Global identifier of the comment that is voted."""
  commentId: ID!

  """Type of the vote."""
  type: CommentVoteType!
}

""""""
input MutationCreateEventInput {
  """Attachments of the event."""
  attachments: [Upload!]

  """Custom information about the event."""
  description: String

  """Date time at the time the event ends at."""
  endAt: DateTime!

  """Name of the event."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Date time at the time the event starts at."""
  startAt: DateTime!
}

""""""
input MutationCreateFundCampaignInput {
  """Currency code of the fund campaign."""
  currencyCode: Iso4217CurrencyCode!

  """Date time at the time the fund campaign ends at."""
  endAt: DateTime!

  """Global identifier of the associated fund."""
  fundId: ID!

  """Minimum amount of money that is set as the goal for the fund campaign."""
  goalAmount: Int!

  """Name of the fund campaign."""
  name: String!

  """Date time at the time the fund campaign starts at."""
  startAt: DateTime!
}

""""""
input MutationCreateFundCampaignPledgeInput {
  """The amount of pledged money."""
  amount: Int!

  """Global identifier of the fund campaign."""
  campaignId: ID!

  """Custom information about the fund campaign pledge."""
  note: String

  """Global identifier of the user who pledged."""
  pledgerId: ID!
}

""""""
input MutationCreateFundInput {
  """Boolean to tell if the fund is tax deductible."""
  isTaxDeductible: Boolean!

  """Name of the fund."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationCreateOrganizationInput {
  """Address line 1 of the organization's address."""
  addressLine1: String

  """Address line 2 of the organization's address."""
  addressLine2: String

  """Avatar of the organization."""
  avatar: Upload

  """Name of the city where the organization resides in."""
  city: String

  """Country code of the country the organization is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the organization."""
  description: String

  """Name of the organization."""
  name: String!

  """Postal code of the organization."""
  postalCode: String

  """Name of the state the organization resides in."""
  state: String
}

""""""
input MutationCreateOrganizationMembershipInput {
  """Global identifier of the associated user."""
  memberId: ID!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Role assigned to the user within the organization."""
  role: OrganizationMembershipRole
}

""""""
input MutationCreatePostInput {
  """Attachments of the post."""
  attachments: [Upload!]

  """Caption about the post."""
  caption: String!

  """Boolean to tell if the post is pinned"""
  isPinned: Boolean

  """
  Global identifier of the associated organization in which the post is posted.
  """
  organizationId: ID!
}

""""""
input MutationCreatePostVoteInput {
  """Global identifier of the post that is voted."""
  postId: ID!

  """Type of the vote."""
  type: PostVoteType!
}

""""""
input MutationCreateTagFolderInput {
  """Name of the tag."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Global identifier of the associated parent tag folder."""
  parentFolderId: ID
}

""""""
input MutationCreateTagInput {
  """Global identifier of the associated tag folder."""
  folderId: ID

  """Name of the tag."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationCreateUserInput {
  """Address line 1 of the user's address."""
  addressLine1: String

  """Address line 2 of the user's address."""
  addressLine2: String

  """Avatar of the user."""
  avatar: Upload

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: String!

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Boolean to tell whether the user has verified their email address."""
  isEmailAddressVerified: Boolean!

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String!

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Language code of the user's preferred natural language."""
  naturalLanguageCode: Iso639Set1LanguageCode

  """Password of the user to sign in to the application."""
  password: String!

  """Postal code of the user."""
  postalCode: String

  """Role assigned to the user in the application."""
  role: UserRole!

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationCreateVenueBookingInput {
  """Global identifier of the event that the venue is to be booked for."""
  eventId: ID!

  """Global identifier of the venue to be booked."""
  venueId: ID!
}

""""""
input MutationCreateVenueInput {
  """Attachments of the venue."""
  attachments: [Upload!]

  """Custom information about the venue."""
  description: String

  """Name of the venue."""
  name: String!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationDeleteAdvertisementInput {
  """Global identifier of the advertisement."""
  id: ID!
}

""""""
input MutationDeleteAgendaFolderInput {
  """Global identifier of the agenda folder."""
  id: ID!
}

""""""
input MutationDeleteAgendaItemInput {
  """Global identifier of the agenda item."""
  id: ID!
}

""""""
input MutationDeleteChatInput {
  """Global identifier of the chat."""
  id: ID!
}

""""""
input MutationDeleteChatMembershipInput {
  """Global identifier of the associated chat."""
  chatId: ID!

  """Global identifier of the associated user."""
  memberId: ID!
}

""""""
input MutationDeleteChatMessageInput {
  """Global identifier of the chat message."""
  id: ID!
}

""""""
input MutationDeleteCommentInput {
  """Global identifier of the comment."""
  id: ID!
}

""""""
input MutationDeleteCommentVoteInput {
  """Global identifier of the comment that is voted."""
  commentId: ID!

  """Global identifier of the user who voted."""
  creatorId: ID!
}

""""""
input MutationDeleteEventInput {
  """Global identifier of the event."""
  id: ID!
}

""""""
input MutationDeleteFundCampaignInput {
  """Global identifier of the fund campaign."""
  id: ID!
}

""""""
input MutationDeleteFundCampaignPledgeInput {
  """Global identifier of the fund campaign pledge."""
  id: ID!
}

""""""
input MutationDeleteFundInput {
  """Global identifier of the fund."""
  id: ID!
}

""""""
input MutationDeleteOrganizationInput {
  """Global identifier of the organization."""
  id: ID!
}

""""""
input MutationDeleteOrganizationMembershipInput {
  """Global identifier of the associated user."""
  memberId: ID!

  """Global identifier of the associated organization."""
  organizationId: ID!
}

""""""
input MutationDeletePostInput {
  """Global identifier of the post."""
  id: ID!
}

""""""
input MutationDeletePostVoteInput {
  """Global identifier of the user who voted."""
  creatorId: ID!

  """Global identifier of the post that is voted."""
  postId: ID!
}

""""""
input MutationDeleteTagFolderInput {
  """Global identifier of the tag folder."""
  id: ID!
}

""""""
input MutationDeleteTagInput {
  """Global identifier of the tag."""
  id: ID!
}

""""""
input MutationDeleteUserInput {
  """Global identifier of the user."""
  id: ID!
}

""""""
input MutationDeleteVenueBookingInput {
  """Global identifier of the event that the venue is booked for."""
  eventId: ID!

  """Global identifier of the venue that is booked."""
  venueId: ID!
}

""""""
input MutationDeleteVenueInput {
  """Global identifier of the venue."""
  id: ID!
}

""""""
input MutationSignUpInput {
  """Address line 1 of the user's address."""
  addressLine1: String

  """Address line 2 of the user's address."""
  addressLine2: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: String!

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String!

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Language code of the user's preferred natural language."""
  naturalLanguageCode: Iso639Set1LanguageCode

  """Password of the user to sign in to the application."""
  password: String!

  """Postal code of the user."""
  postalCode: String

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationUpdateAdvertisementInput {
  """Custom information about the advertisement."""
  description: String

  """Date time at which the advertised event ends."""
  endAt: DateTime

  """Global identifier of the associated organization."""
  id: ID!

  """Name of the advertisement."""
  name: String

  """Date time at which the advertised event starts."""
  startAt: DateTime

  """Type of the advertisement."""
  type: AdvertisementType
}

""""""
input MutationUpdateAgendaFolderInput {
  """Global identifier of the agenda folder."""
  id: ID!

  """Name of the agenda folder."""
  name: String

  """
  Global identifier of the agenda folder the agenda folder is contained within.
  """
  parentFolderId: ID
}

""""""
input MutationUpdateAgendaItemInput {
  """Custom information about the agenda item."""
  description: String

  """Duration of the agenda item."""
  duration: String

  """Global identifier of the associated agenda folder."""
  folderId: ID

  """Global identifier of the agenda item."""
  id: ID!

  """
  Key of the agenda item if it's of a "song" type. More information at [this](https://en.wikipedia.org/wiki/Key_(music)) link.
  """
  key: String

  """Name of the agenda item."""
  name: String
}

""""""
input MutationUpdateChatInput {
  """Avatar of the chat."""
  avatar: Upload

  """Custom information about the chat."""
  description: String

  """Global identifier of the chat."""
  id: ID!

  """Name of the chat."""
  name: String
}

""""""
input MutationUpdateChatMembershipInput {
  """Global identifier of the associated chat."""
  chatId: ID!

  """Global identifier of the associated user."""
  memberId: ID!

  """Role assigned to the user within the chat."""
  role: ChatMembershipRole!
}

""""""
input MutationUpdateChatMessageInput {
  """Body of the chat message."""
  body: String!

  """Global identifier of the chat message."""
  id: ID!
}

""""""
input MutationUpdateCommentInput {
  """Body of the comment."""
  body: String

  """Global identifier of the comment."""
  id: ID!
}

""""""
input MutationUpdateCommentVoteInput {
  """Global identifier of the comment that is voted."""
  commentId: ID!

  """Type of the vote."""
  type: CommentVoteType!
}

""""""
input MutationUpdateCommunityInput {
  """URL to the facebook account of the community."""
  facebookURL: String

  """URL to the gitGub account of the community."""
  githubURL: String

  """
  Duration in seconds it should take for inactive clients to get timed out of their authenticated session within client-side talawa applications.
  """
  inactivityTimeoutDuration: Int

  """URL to the instagram account of the community."""
  instagramURL: String

  """URL to the linkedin account of the community."""
  linkedinURL: String

  """Mime type of the logo of the community."""
  logo: Upload

  """Name of the community."""
  name: String

  """URL to the reddit account of the community."""
  redditURL: String

  """URL to the slack account of the community."""
  slackURL: String

  """URL to the website of the community."""
  websiteURL: String

  """URL to the x account of the community."""
  xURL: String

  """URL to the youtube account of the community."""
  youtubeURL: String
}

""""""
input MutationUpdateCurrentUserInput {
  """Address line 1 of the user's address."""
  addressLine1: String

  """Address line 2 of the user's address."""
  addressLine2: String

  """Avatar of the user."""
  avatar: Upload

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: String

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Language code of the user's preferred natural language."""
  naturalLanguageCode: Iso639Set1LanguageCode

  """Password of the user to sign in to the application."""
  password: String

  """Postal code of the user."""
  postalCode: String

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationUpdateEventInput {
  """Custom information about the event."""
  description: String

  """Date time at the time the event ends at."""
  endAt: DateTime

  """Global identifier of the event."""
  id: ID!

  """Name of the event."""
  name: String

  """Date time at the time the event starts at."""
  startAt: DateTime
}

""""""
input MutationUpdateFundCampaignInput {
  """Date time at the time the fund campaign ends at."""
  endAt: DateTime

  """Minimum amount of money that is set as the goal for the fund campaign."""
  goalAmount: Int

  """Global identifier of the associated fund campaign."""
  id: ID!

  """Name of the fundCampaign."""
  name: String

  """Date time at the time the fund campaign starts at."""
  startAt: DateTime
}

""""""
input MutationUpdateFundCampaignPledgeInput {
  """The amount of pledged money."""
  amount: Int

  """Global identifier of the associated fund campaign pledge."""
  id: ID!

  """Custom information about the fund campaign pledge."""
  note: String
}

""""""
input MutationUpdateFundInput {
  """Global identifier of the associated organization."""
  id: ID!

  """Boolean to tell if the fund is tax deductible."""
  isTaxDeductible: Boolean

  """Name of the fund."""
  name: String
}

""""""
input MutationUpdateOrganizationInput {
  """Address line 1 of the organization's address."""
  addressLine1: String

  """Address line 2 of the organization's address."""
  addressLine2: String

  """Avatar of the organization."""
  avatar: Upload

  """Name of the city where the organization resides in."""
  city: String

  """Country code of the country the organization is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the organization."""
  description: String

  """Global identifier of the organization."""
  id: ID!

  """Name of the organization."""
  name: String

  """Postal code of the organization."""
  postalCode: String

  """Name of the state the organization resides in."""
  state: String
}

""""""
input MutationUpdateOrganizationMembershipInput {
  """Global identifier of the associated user."""
  memberId: ID!

  """Global identifier of the associated organization."""
  organizationId: ID!

  """Role assigned to the user within the organization."""
  role: OrganizationMembershipRole
}

""""""
input MutationUpdatePostInput {
  """Caption about the post."""
  caption: String

  """Global identifier of the post."""
  id: ID!

  """Boolean to tell if the post is pinned"""
  isPinned: Boolean
}

""""""
input MutationUpdatePostVoteInput {
  """Global identifier of the voted post."""
  postId: ID!

  """Type of the vote."""
  type: PostVoteType!
}

""""""
input MutationUpdateTagFolderInput {
  """Global identifier of the tag folder."""
  id: ID!

  """Name of the tag folder."""
  name: String

  """Global identifier of associated parent tag folder."""
  parentFolderId: ID
}

""""""
input MutationUpdateTagInput {
  """Global identifier of associated tag folder."""
  folderId: ID

  """Global identifier of the tag."""
  id: ID!

  """Name of the tag."""
  name: String
}

""""""
input MutationUpdateUserInput {
  """Address line 1 of the user's address."""
  addressLine1: String

  """Address line 2 of the user's address."""
  addressLine2: String

  """Avatar of the user."""
  avatar: Upload

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: String

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Global identifier of the user."""
  id: ID!

  """Boolean to tell whether the user has verified their email address."""
  isEmailAddressVerified: Boolean

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Language code of the user's preferred natural language."""
  naturalLanguageCode: Iso639Set1LanguageCode

  """Password of the user to sign in to the application."""
  password: String

  """Postal code of the user."""
  postalCode: String

  """Role assigned to the user in the application."""
  role: UserRole

  """Name of the state the user resides in."""
  state: String

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

""""""
input MutationUpdateVenueInput {
  """Custom information about the venue."""
  description: String

  """Global identifier of the venue."""
  id: ID!

  """Name of the venue."""
  name: String
}

type Organization {
  """Address line 1 of the organization's address."""
  addressLine1: String

  """Address line 2 of the organization's address."""
  addressLine2: String

  """
  GraphQL connection to traverse through the advertisements belonging to the organization.
  """
  advertisements(after: String, before: String, first: Int, last: Int): OrganizationAdvertisementsConnection

  """Mime type of the avatar of the organization."""
  avatarMimeType: String

  """URL to the avatar of the organization."""
  avatarURL: String

  """
  GraphQL connection to traverse through the chats belonging to the organization.
  """
  chats(after: String, before: String, first: Int, last: Int): OrganizationChatsConnection

  """Name of the city where the organization exists in."""
  city: String

  """Country code of the country the organization exists in."""
  countryCode: Iso3166Alpha2CountryCode

  """Date time at the time the organization was created."""
  createdAt: DateTime

  """User who created the organization."""
  creator: User

  """Custom information about the organization."""
  description: String

  """
  GraphQL connection to traverse through the events belonging to the organization.
  """
  events(after: String, before: String, first: Int, last: Int): OrganizationEventsConnection

  """
  GraphQL connection to traverse through the funds belonging to the organization.
  """
  funds(after: String, before: String, first: Int, last: Int): OrganizationFundsConnection

  """Global identifier of the organization."""
  id: ID!

  """
  GraphQL connection to traverse through the users that are members of the organization.
  """
  members(after: String, before: String, first: Int, last: Int): OrganizationMembersConnection

  """Name of the organization."""
  name: String

  """
  GraphQL connection to traverse through the pinned posts belonging to the organization.
  """
  pinnedPosts(after: String, before: String, first: Int, last: Int): OrganizationPinnedPostsConnection

  """Total number of pinned posts belonging to the organization."""
  pinnedPostsCount: Int

  """Postal code of the organization."""
  postalCode: String

  """
  GraphQL connection to traverse through the posts belonging to the organization.
  """
  posts(after: String, before: String, first: Int, last: Int): OrganizationPostsConnection

  """Total number of posts belonging to the organization."""
  postsCount: Int

  """Name of the state the organization exists in."""
  state: String

  """
  GraphQL connection to traverse through the tag folders belonging to the organization.
  """
  tagFolders(after: String, before: String, first: Int, last: Int): OrganizationTagFoldersConnection

  """
  GraphQL connection to traverse through the tags belonging to the organization.
  """
  tags(after: String, before: String, first: Int, last: Int): OrganizationTagsConnection

  """Date time at the time the organization was last updated."""
  updatedAt: DateTime

  """User who last updated the organization."""
  updater: User

  """
  GraphQL connection to traverse through the venues belonging to the organization.
  """
  venues(after: String, before: String, first: Int, last: Int): OrganizationVenuesConnection
}

""""""
type OrganizationAdvertisementsConnection {
  edges: [OrganizationAdvertisementsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationAdvertisementsConnectionEdge {
  cursor: String!
  node: Advertisement
}

""""""
type OrganizationChatsConnection {
  edges: [OrganizationChatsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationChatsConnectionEdge {
  cursor: String!
  node: Chat
}

""""""
type OrganizationEventsConnection {
  edges: [OrganizationEventsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationEventsConnectionEdge {
  cursor: String!
  node: Event
}

""""""
type OrganizationFundsConnection {
  edges: [OrganizationFundsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationFundsConnectionEdge {
  cursor: String!
  node: Fund
}

""""""
type OrganizationMembersConnection {
  edges: [OrganizationMembersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationMembersConnectionEdge {
  cursor: String!
  node: User
}

"""
Possible variants of the role assigned to a user within an organization.
"""
enum OrganizationMembershipRole {
  administrator
  regular
}

""""""
type OrganizationPinnedPostsConnection {
  edges: [OrganizationPinnedPostsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationPinnedPostsConnectionEdge {
  cursor: String!
  node: Post
}

""""""
type OrganizationPostsConnection {
  edges: [OrganizationPostsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationPostsConnectionEdge {
  cursor: String!
  node: Post
}

""""""
type OrganizationTagFoldersConnection {
  edges: [OrganizationTagFoldersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationTagFoldersConnectionEdge {
  cursor: String!
  node: TagFolder
}

""""""
type OrganizationTagsConnection {
  edges: [OrganizationTagsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationTagsConnectionEdge {
  cursor: String!
  node: Tag
}

""""""
type OrganizationVenuesConnection {
  edges: [OrganizationVenuesConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type OrganizationVenuesConnectionEdge {
  cursor: String!
  node: Venue
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Post {
  """Array of attachments."""
  attachments: [PostAttachment!]

  """Caption for the post."""
  caption: String

  """
  GraphQL connection to traverse through the comments created under the post.
  """
  comments(after: String, before: String, first: Int, last: Int): PostCommentsConnection

  """Total number of comments created under the post."""
  commentsCount: Int

  """Date time at the time the post was created."""
  createdAt: DateTime

  """User who created the post."""
  creator: User

  """
  GraphQL connection to traverse through the users that down voted the post.
  """
  downVoters(after: String, before: String, first: Int, last: Int): PostDownVotersConnection

  """Total number of down votes on the post."""
  downVotesCount: Int

  """Global identifier of the post."""
  id: ID!

  """Organization which the post belongs to."""
  organization: Organization

  """Date time at the time the post was pinned."""
  pinnedAt: DateTime

  """
  GraphQL connection to traverse through the user that up voted the post.
  """
  upVoters(after: String, before: String, first: Int, last: Int): PostUpVotersConnection

  """Total number of up votes on the post."""
  upVotesCount: Int

  """Date time at the time the post was last updated."""
  updatedAt: DateTime

  """User who last updated the post."""
  updater: User
}

type PostAttachment {
  """Mime type of the attachment."""
  mimeType: String

  """URL to the attachment."""
  url: String
}

""""""
type PostCommentsConnection {
  edges: [PostCommentsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type PostCommentsConnectionEdge {
  cursor: String!
  node: Comment
}

""""""
type PostDownVotersConnection {
  edges: [PostDownVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type PostDownVotersConnectionEdge {
  cursor: String!
  node: User
}

""""""
type PostUpVotersConnection {
  edges: [PostUpVotersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type PostUpVotersConnectionEdge {
  cursor: String!
  node: User
}

"""Possible variants of the type of a vote on a post."""
enum PostVoteType {
  down_vote
  up_vote
}

type Query {
  """Query field to read an advertisement."""
  advertisement(input: QueryAdvertisementInput!): Advertisement

  """Query field to read an agenda folder."""
  agendaFolder(input: QueryAgendaFolderInput!): AgendaFolder

  """Query field to read an agenda item."""
  agendaItem(input: QueryAgendaItemInput!): AgendaItem

  """Query field to read a chat."""
  chat(input: QueryChatInput!): Chat

  """Query field to read a chat message."""
  chatMessage(input: QueryChatMessageInput!): ChatMessage

  """Query field to read a comment."""
  comment(input: QueryCommentInput!): Comment

  """Query field to read the community."""
  community: Community

  """Query field to read a user."""
  currentUser: User

  """Query field to read an event."""
  event(input: QueryEventInput!): Event

  """Query field to read a fund."""
  fund(input: QueryFundInput!): Fund

  """Query field to read a fund campaign."""
  fundCampaign(input: QueryFundCampaignInput!): FundCampaign

  """Query field to read a fund campaign pledge."""
  fundCampaignPledge(input: QueryFundCampaignPledgeInput!): FundCampaignPledge

  """Query field to read an organization."""
  organization(input: QueryOrganizationInput!): Organization

  """Query field to read a post."""
  post(input: QueryPostInput!): Post

  """
  Query field to renew the authentication token of an authenticated client for signing in to talawa.
  """
  renewAuthenticationToken: String

  """Query field for a client to sign in to talawa."""
  signIn(input: QuerySignInInput!): AuthenticationPayload

  """Query field to read a tag."""
  tag(input: QueryTagInput!): Tag

  """Query field to read a tag folder."""
  tagFolder(input: QueryTagFolderInput!): TagFolder

  """Query field to read a user."""
  user(input: QueryUserInput!): User

  """Query field to read a venue."""
  venue(input: QueryVenueInput!): Venue
}

""""""
input QueryAdvertisementInput {
  """Global id of the advertisement."""
  id: String!
}

""""""
input QueryAgendaFolderInput {
  """Global id of the agenda folder."""
  id: String!
}

""""""
input QueryAgendaItemInput {
  """Global id of the agenda item."""
  id: String!
}

""""""
input QueryChatInput {
  """Global id of the chat."""
  id: String!
}

""""""
input QueryChatMessageInput {
  """Global id of the chat message."""
  id: String!
}

""""""
input QueryCommentInput {
  """Global id of the comment."""
  id: String!
}

""""""
input QueryEventInput {
  """Global id of the event."""
  id: String!
}

""""""
input QueryFundCampaignInput {
  """Global id of the fund campaign."""
  id: String!
}

""""""
input QueryFundCampaignPledgeInput {
  """Global id of the fund campaign pledge."""
  id: String!
}

""""""
input QueryFundInput {
  """Global id of the fund."""
  id: String!
}

""""""
input QueryOrganizationInput {
  """Global id of the organization."""
  id: String!
}

""""""
input QueryPostInput {
  """Global id of the post."""
  id: String!
}

""""""
input QuerySignInInput {
  """Email address of the user."""
  emailAddress: String!

  """Password of the user to sign in to talawa."""
  password: String!
}

""""""
input QueryTagFolderInput {
  """Global id of the tag folder."""
  id: String!
}

""""""
input QueryTagInput {
  """Global id of the tag."""
  id: String!
}

""""""
input QueryUserInput {
  """Global id of the user."""
  id: String!
}

""""""
input QueryVenueInput {
  """Global id of the venue."""
  id: String!
}

type Subscription {
  """
  Subscription field to subscribe to the event of creation of a message in a chat.
  """
  chatMessageCreate(input: SubscriptionChatMessageCreateInput!): ChatMessage
}

""""""
input SubscriptionChatMessageCreateInput {
  """Global identifier of the chat."""
  id: String!
}

type Tag {
  """
  GraphQL connection to traverse through the users that are assignees of the tag.
  """
  assignees(after: String, before: String, first: Int, last: Int): TagAssigneesConnection

  """Date time at the time the tag was created."""
  createdAt: DateTime

  """User who created the tag."""
  creator: User

  """Tag folder the tag is contained within."""
  folder: TagFolder

  """Global identifier of the tag."""
  id: ID!

  """Name of the tag."""
  name: String

  """Organization the tag belong to."""
  organization: Organization

  """Date time at the time the tag was last updated."""
  updatedAt: DateTime

  """User who last updated the tag."""
  updater: User
}

""""""
type TagAssigneesConnection {
  edges: [TagAssigneesConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type TagAssigneesConnectionEdge {
  cursor: String!
  node: User
}

type TagFolder {
  """
  GraphQL connection to traverse through the tag folders contained within the tag folder.
  """
  childFolders(after: String, before: String, first: Int, last: Int): TagFolderChildFoldersConnection

  """Date time at the time the tag folder was created."""
  createdAt: DateTime

  """User who created the tag folder."""
  creator: User

  """Global identifier of the tag folder."""
  id: ID!

  """Name of the tag folder."""
  name: String

  """Organization which the tag folder belongs to."""
  organization: Organization

  """Tag folder the tag folder is contained within."""
  parentFolder: TagFolder

  """
  GraphQL connection to traverse through the tags contained within the tag folder.
  """
  tags(after: String, before: String, first: Int, last: Int): TagFolderTagsConnection

  """Date time at the time the tag folder was last updated."""
  updatedAt: DateTime

  """User who last updated the tag folder."""
  updater: User
}

""""""
type TagFolderChildFoldersConnection {
  edges: [TagFolderChildFoldersConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type TagFolderChildFoldersConnectionEdge {
  cursor: String!
  node: TagFolder
}

""""""
type TagFolderTagsConnection {
  edges: [TagFolderTagsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type TagFolderTagsConnectionEdge {
  cursor: String!
  node: Tag
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  """Address line 1 of the user's address."""
  addressLine1: String

  """Address line 2 of the user's address."""
  addressLine2: String

  """Mime type of the avatar of the user."""
  avatarMimeType: String

  """URL to the avatar of the user."""
  avatarURL: String

  """Date of birth of the user."""
  birthDate: Date

  """Name of the city where the user resides in."""
  city: String

  """Country code of the country the user is a citizen of."""
  countryCode: Iso3166Alpha2CountryCode

  """Date time at the time the user was created."""
  createdAt: DateTime

  """User who created the user."""
  creator: User

  """Custom information about the user."""
  description: String

  """Primary education grade of the user."""
  educationGrade: UserEducationGrade

  """Email address of the user."""
  emailAddress: String

  """Employment status of the user."""
  employmentStatus: UserEmploymentStatus

  """The phone number to use to communicate with the user at their home."""
  homePhoneNumber: PhoneNumber

  """Global identifier of the user."""
  id: ID!

  """Boolean to tell whether the user has verified their email address."""
  isEmailAddressVerified: Boolean

  """Marital status of the user."""
  maritalStatus: UserMaritalStatus

  """
  The phone number to use to communicate with the user on their mobile phone.
  """
  mobilePhoneNumber: PhoneNumber

  """Name of the user."""
  name: String

  """The sex assigned to the user at their birth."""
  natalSex: UserNatalSex

  """Language code of the user's preferred natural language."""
  naturalLanguageCode: Iso639Set1LanguageCode

  """
  GraphQL connection to traverse through the organizations the user is a member of.
  """
  organizationsWhereMember(after: String, before: String, first: Int, last: Int): UserOrganizationsWhereMemberConnection

  """Postal code of the user."""
  postalCode: String

  """Role assigned to the user in the application."""
  role: UserRole

  """Name of the state the user resides in."""
  state: String

  """Date time at the time the user was last updated."""
  updatedAt: DateTime

  """User who last updated the user."""
  updater: User

  """
  The phone number to use to communicate with the user while they're at work.
  """
  workPhoneNumber: PhoneNumber
}

"""Possible variants of the education grade(if applicable) of a user."""
enum UserEducationGrade {
  grade_1
  grade_2
  grade_3
  grade_4
  grade_5
  grade_6
  grade_7
  grade_8
  grade_9
  grade_10
  grade_11
  grade_12
  graduate
  kg
  no_grade
  pre_kg
}

"""Possible variants of the employment status(if applicable) of a user."""
enum UserEmploymentStatus {
  full_time
  part_time
  unemployed
}

"""Possible variants of the martial status(if applicable) of a user."""
enum UserMaritalStatus {
  divorced
  engaged
  married
  seperated
  single
  widowed
}

"""Possible variants of the sex assigned to a user at birth."""
enum UserNatalSex {
  female
  intersex
  male
}

""""""
type UserOrganizationsWhereMemberConnection {
  edges: [UserOrganizationsWhereMemberConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type UserOrganizationsWhereMemberConnectionEdge {
  cursor: String!
  node: Organization
}

"""Possible variants of the role assigned to a user."""
enum UserRole {
  administrator
  regular
}

type Venue {
  """Array of attachments."""
  attachments: [VenueAttachment!]

  """Date time at the time the venue was created."""
  createdAt: DateTime

  """User who created the venue."""
  creator: User

  """Custom information about the venue."""
  description: String

  """
  GraphQL connection to traverse through the events the venue has been booked for.
  """
  events(after: String, before: String, first: Int, last: Int): VenueEventsConnection

  """Global identifier of the venue."""
  id: ID!

  """Name of the venue."""
  name: String

  """Organization the venue belongs to."""
  organization: Organization

  """Date time at the time the venue was last updated."""
  updatedAt: DateTime

  """User who last updated the venue."""
  updater: User
}

type VenueAttachment {
  """Mime type of the attachment."""
  mimeType: String

  """URL to the attachment."""
  url: String
}

""""""
type VenueEventsConnection {
  edges: [VenueEventsConnectionEdge]
  pageInfo: PageInfo!
}

""""""
type VenueEventsConnectionEdge {
  cursor: String!
  node: Event
}